@model DemoAspMvcDt.HtmlHelpers.Datatables.RazorExtension.DtModel
<script>

    module_@Model.TableName = (function () {

        @if (Model.IsDtAjaxLoadingDefferd){
            <text>
            let isDtAjaxLoadingDefferd = true;
            </text>

        }else {
            <text>
            let isDtAjaxLoadingDefferd = false;
            </text>
        }

        $(function () {

                dtModel = @Html.Raw(Json.Encode(Model));

                let rawTableName = dtModel.TableName;

                let closestDiv = document.getElementById(`div__dt__${rawTableName}`); //This div is added in DtModel.cs --> ToString()

                let _jQueryTable = DtTableHtmlHelper.createTable(dtModel, closestDiv);


                @if (Model.HasEditRowCommand)
            {
                <text>
                //Edit Column: must be setup before datatable creation to catch the draw event
            _jQueryTable.on('draw.dt', function () { DtEditCmd.setEditCmd(dtModel, _jQueryTable, rawTableName); });
                </text>
            }

               @if (Model.HasCheckboxColumns)
            {
                <text>
                //Checkbox Column: must be setup before datatable creation to catch the draw event
            _jQueryTable.on('draw.dt', function () { DtCheckBoxColumnHelper.setupCheckboxColumns( _jQueryTable); });
                </text>
            }



                let dtCustomConfig =@Html.Raw(Model.CustomConfigValues);



                @if(Model.HasDefaultSettings) {
                <text>
                //Will merge custom and default settings for the datatable:
                //in this case, default settings will be overwritten by custom ones having same name
                // To inverse the logic, do this instead: dtCustomConfig = $.extend({},dtCustomConfig, Model.defaultDtConfigValue());

                    dtCustomConfig = $.extend({}, @Model.DefaultConfigValues (), dtCustomConfig);
                </text>
                }

                //Init dataTable
                let dtTable =  _jQueryTable .DataTable(dtCustomConfig);

                //Create an instance for the DtApi
                @if(Model.DoCreateDtApiInstance) {
                    <text>
                    // will be a global variable
                    @Model.DtApiInstanceName = DtApi.getInstance(_jQueryTable);
                    </text>
                }

                // data setup for form-Submit
            @if (Model.IsUsedInForm) {

             <text>
                DtFormHelper.convertFormDataIntoHiddenInputsForSubmit(dtModel, closestDiv, dtTable, _jQueryTable);
             </text>
                }

                DtEventsHelper.setupEvents(dtModel, dtTable);


            });//JS block-End

            function deferAjaxCall() {
                return isDtAjaxLoadingDefferd ;
            }
            function cancelDeferAjaxCall() {
                isDtAjaxLoadingDefferd =false;
            }

            return {
                deferAjaxCall,
                cancelDeferAjaxCall
            }
        })();
</script>