@model DemoAspMvcDt.HtmlHelpers.Datatables.RazorExtension.DtModel
<script>

    module_@Model.TableName = (function () {

        $(function () {

            let dtModel = @Html.Raw(Json.Encode(Model));

            let rawTableName = dtModel.TableName;

            let closestDiv = document.getElementById(`div__dt__${rawTableName}`); //This div is added in DtModel.cs --> ToString()

            let _jQueryTable = DtTableHtmlHelper.createTable(dtModel, closestDiv);


             //Edit Column: must be setup before datatable creation to catch the draw event
            @if (Model.HasEditRowCommand)
            {
                <text>
            _jQueryTable.on('draw.dt', function () { DtEditCmd.setEditCmd(dtModel, _jQueryTable, rawTableName); });
                </text>
            }


                    // if true then the "ajax" call will not trigger on first time: See the "ajax" settings for the Datatable in the "dtCustomConfig" object
                    // NB: Must be placed here (just before the "dtCustomConfig")
                    // Used in 'DtModel.cd --> InitDataTableConfig --> Ajax config'
                    let _isDtAjaxLoadingDefferd  =dtModel.IsDtAjaxLoadingDefferd;

                     let dtCustomConfig =@Html.Raw(Model.CustomConfigValues);


                     //Will merge custom and default settings for the datatable:
                      //in this case, default settings will be overwritten by custom ones having same name
                     // To inverse the logic, do this instead: dtCustomConfig = $.extend({},dtCustomConfig, Model.defaultDtConfigValue());
            if (dtModel.HasDefaultSettings) {

                        dtCustomConfig = $.extend({}, @Model.DefaultConfigValues (), dtCustomConfig);
                    }

                    //Init dataTable
                    let dtTable  = _jQueryTable .DataTable(dtCustomConfig);

            //Create an instance for the DtApi
            if (dtModel.DoCreateDtApiInstance) {

                 // will be a global variable
                  @Model.DtApiInstanceName = new DtApi(rawTableName);
                    }

            // data setup for form-Submit 
            if (dtModel.IsUsedInForm) {

                DtFormHelper.setupForm(dtModel, closestDiv, dtTable, _jQueryTable);
            }

            DtEventsHelper.setupEvents(dtModel, dtTable);
        });
    })();
</script>